# Generated by Django 4.2.25 on 2025-10-01 23:32

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='TrainingPage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('region', models.CharField(choices=[('quebec', 'Quebec'), ('central', 'Central'), ('pacific', 'Pacific'), ('prairie', 'Prairie'), ('atlantic', 'Atlantic')], help_text='The region this training page is for', max_length=20, unique=True)),
                ('title', models.CharField(default='PA465 2026 bZ Virtual Training', help_text='The main title shown on the page', max_length=200)),
                ('main_image', models.ImageField(default='training_images/2026_bz.jpg', help_text='The main image shown on the page (like the 2026_bz.jpg)', upload_to='training_images/')),
                ('timezone', models.CharField(default='America/Toronto', help_text='Timezone for this region (EST/EDT)', max_length=50)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this training page is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['region'],
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('master', 'Master User'), ('admin', 'Admin User')], default='admin', help_text='Master users can edit all pages, Admin users can only edit assigned pages', max_length=10)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='TrainingSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(help_text='Date of the training session')),
                ('time_est', models.TimeField(help_text='Time of the training session (Eastern Time)')),
                ('teams_link', models.URLField(blank=True, help_text='Microsoft Teams meeting link')),
                ('teams_link_valid', models.BooleanField(default=False, help_text='Whether the Teams link is working')),
                ('teams_link_last_tested', models.DateTimeField(blank=True, help_text='When the Teams link was last tested', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('training_page', models.ForeignKey(help_text='Which training page this session belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='training_app.trainingpage')),
            ],
            options={
                'ordering': ['date', 'time_est'],
                'unique_together': {('training_page', 'date', 'time_est')},
            },
        ),
    ]
